package com.betacom.jpa.services.implementations;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.betacom.jpa.dto.CertificatoDTO;
import com.betacom.jpa.dto.SocioDTO;
import com.betacom.jpa.exception.AcademyException;
import com.betacom.jpa.models.Socio;
import com.betacom.jpa.repositories.ISocioRepository;
import com.betacom.jpa.requests.SocioReq;
import com.betacom.jpa.services.interfaces.ISocioServices;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
public class SocioImpl implements ISocioServices {

	@Autowired
	private ISocioRepository socioRepository;

	@Override
	public Integer insert(SocioReq req) throws AcademyException {

		log.debug("Insert: " + req);

		System.out.println("Insert: " + req.toString());

		Socio soc = new Socio();

		Optional<Socio> s = socioRepository.findByCodiceFiscale(req.getCodiceFiscale());

		if (s.isPresent()) throw new AcademyException("Socio gi√† esistente nel database");

		soc.setCodiceFiscale(req.getCodiceFiscale());
		soc.setCognome(req.getCognome());
		soc.setEmail(req.getEmail());
		soc.setNome(req.getNome());

		return socioRepository.save(soc).getId();

	}
	
	@Override
	public void update(SocioReq req) throws AcademyException {
		log.debug("Update: " + req);
		
		Optional<Socio> s = socioRepository.findById(req.getId());
		
		if(s.isEmpty()) throw new AcademyException("Socio non trovato nel database: " + req.getId());
		
		Socio socio = s.get();
		
		if(req.getNome() != null) {
			socio.setNome(req.getNome());
		}
		if(req.getCognome() != null) {
			socio.setCognome(req.getCognome());
		}
		if(req.getEmail() != null) {
			socio.setEmail(req.getEmail());
		}
		if(req.getNome() != null) {
			socio.setNome(req.getNome());
		}
		if(req.getNome() != null) {
			socio.setNome(req.getNome());
		}
		
		
	}

	@Override
	public void delete(SocioReq req) throws AcademyException {

		log.debug("delete :" + req);

		Optional<Socio> s = socioRepository.findById(req.getId());

		if (s.isEmpty()) throw new AcademyException("Socio non trovatoin database");

		socioRepository.delete(s.get());

	}

	@Override
	public List<SocioDTO> listAll() {

		List<Socio> lS = socioRepository.findAll();
		return lS.stream().map(s -> SocioDTO.builder().codiceFiscale(s.getCodiceFiscale()).id(s.getId())
				.cognome(s.getCognome()).nome(s.getNome()).email(s.getEmail())
				.certificato((s.getCertificato() == null) ? null
						: CertificatoDTO.builder().id(s.getCertificato().getId()).tipo(s.getCertificato().getTipo())
								.dataCertificato(s.getCertificato().getDataCertificato()).build())
				.build()).collect(Collectors.toList());

	}



}
