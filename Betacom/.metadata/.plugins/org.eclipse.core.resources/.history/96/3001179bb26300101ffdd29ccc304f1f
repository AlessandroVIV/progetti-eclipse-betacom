package com.betacom.car.process;

import java.util.List;

import com.betacom.car.dao.BiciDAO;
import com.betacom.car.dao.MacchinaDAO;
import com.betacom.car.dao.MotoDAO;
import com.betacom.car.dao.VeicoloDAO;
import com.betacom.car.exception.AcademyException;
import com.betacom.car.models.Bici;
import com.betacom.car.models.Macchina;
import com.betacom.car.models.Moto;
import com.betacom.car.models.Veicolo;
import com.betacom.car.singletone.SQLConfiguration;
import com.betacom.car.utilities.SQLManager;
import com.betacom.car.utilities.Utils;

public class StartVeicolo {

    private SQLManager db = new SQLManager();
    private VeicoloDAO daoV = new VeicoloDAO();
    private BiciDAO daoB = new BiciDAO();
    private MacchinaDAO daoM = new MacchinaDAO();
    private MotoDAO daoMo = new MotoDAO();

    public boolean execute(List<String> params) {

        System.out.println("Begin StartVeicolo");
        
        boolean rc = true;

        try {
        	
            SQLConfiguration.getInstance().getConnection();
            System.out.println("\nConnessione aperta!\n");
            SQLConfiguration.getInstance().setAutoCommit();

//            // SELEZIONI
//            List<Veicolo> lV = daoV.findAll();
//            lV.forEach(v -> System.out.println(v));
//
//            List<Bici> lB = daoB.findAll();
//            lB.forEach(b -> System.out.println(b));
//
//            List<Macchina> lM = daoM.findAll();
//            lM.forEach(m -> System.out.println(m));
//
//            List<Moto> lMo = daoMo.findAll();
//            lMo.forEach(mo -> System.out.println(mo));
//
//            lV = daoV.findGeneric("veicoli.colore", new Object[]{1});
//            lV.forEach(v -> System.out.println("\n" + v));
//
//            // INSERT BICI
//            Object[] biciParams = { 7, 2, true };
//            
//            int nuovoIdBici = daoB.insert("insert_bici", biciParams);
//            System.out.println("\nNuova bici inserita con ID: " + nuovoIdBici + "!");
//
//            Object[] insertParams = {
//                2024, 2, 1, 1, 1, 1, 1, null, null, nuovoIdBici
//            };
//            
//            int nuovoId = daoV.insert("insert_veicolo", insertParams);
//            System.out.println("\nNuovo veicolo inserito con ID: " + nuovoId + "!");
//
//            // INSERT MACCHINA
//            Object[] macchinaParams = { 5, "BW728FS", 1500 };
//            
//            int nuovoIdMacchina = daoM.insert("insert_macchina", macchinaParams);
//            System.out.println("\nNuova macchina inserita con ID: " + nuovoIdMacchina + "!");
//
//            Object[] veicoloMacchinaParams = {
//                2023, 4, 1, 2, 3, 2, 3, nuovoIdMacchina, null, null
//            };
//            
//            int nuovoVeicoloMacchina = daoV.insert("insert_veicolo", veicoloMacchinaParams);
//            System.out.println("\nNuovo veicolo inserito con ID: " + nuovoVeicoloMacchina + "!");
//
//            // INSERT MOTO
//            Object[] motoParams = { "AX001JH", 300 };
//            int nuovoIdMoto = daoMo.insert("insert_moto", motoParams);
//            
//            System.out.println("\nNuova moto inserita con ID: " + nuovoIdMoto + "!");
//
//            Object[] veicoloMotoParams = {
//                2022, 2, 2, 2, 2, 2, 2, null, nuovoIdMoto, null
//            };
//            
//            int nuovoVeicoloMoto = daoV.insert("insert_veicolo", veicoloMotoParams);
//            System.out.println("\nNuovo veicolo inserito con ID: " + nuovoVeicoloMoto + "!");
//
//            // UPDATE VEICOLO
//            Object[] updateParams = {
//                2025, 3, nuovoId // <-- qui hai scritto "nuo" per errore
//            };
//            
//            int updatedRows = daoV.update("update_veicolo", updateParams);
//            System.out.println("\nNumero di veicoli aggiornati: " + updatedRows);
//
//            // UPDATE BICI
//            Object[] updateBiciParams = {
//                21, 1, false, nuovoIdBici
//            };
//            
//            int updated = daoB.update("update_bici", updateBiciParams);
//            System.out.println("\nBici aggiornata! Righe modificate: " + updated);
//
//            // UPDATE MACCHINA
//            Object[] updateMacchinaParams = {
//                3, "ZZ999ZZ", 1600, nuovoIdMacchina
//            };
//            
//            int updatedMacchina = daoM.update("update_macchina", updateMacchinaParams);
//            System.out.println("\nMacchina aggiornata: " + updatedMacchina);
//
//            // UPDATE MOTO
//            Object[] updateMotoParams = {
//                "XY123XY", 500, nuovoIdMoto
//            };
//            
//            int updatedMoto = daoMo.update("update_moto", updateMotoParams);
//            System.out.println("\nMoto aggiornata: " + updatedMoto);
//
//         // FUNZIONI DI DELETE
//
//         // Eliminazione bici come veicolo
//         Object[] deleteVeicoloBiciParams = {nuovoId}; 
//         int deletedVeicoloBici = daoV.delete("delete_veicolo", deleteVeicoloBiciParams);
//         System.out.println("\nVeicolo (bici) eliminato! Righe eliminate: " + deletedVeicoloBici);
//
//         // Eliminazione bici effettiva
//         Object[] deleteBiciParams = { nuovoIdBici };
//         int deletedBici = daoB.delete("delete_bici", deleteBiciParams);
//         System.out.println("Bici eliminata! Righe eliminate: " + deletedBici);
//
//         // Eliminazione macchina come veicolo
//         Object[] deleteVeicoloMacchinaParams = { nuovoVeicoloMacchina };
//         int deletedVeicoloMacchina = daoV.delete("delete_veicolo", deleteVeicoloMacchinaParams);
//         System.out.println("\nVeicolo (macchina) eliminato! Righe eliminate: " + deletedVeicoloMacchina);
//
//         // Eliminazione macchina effettiva
//         Object[] deleteMacchinaParams = { nuovoIdMacchina };
//         int deletedMacchina = daoM.delete("delete_macchina", deleteMacchinaParams);
//         System.out.println("Macchina eliminata! Righe eliminate: " + deletedMacchina);
//
//         // Eliminazione moto come veicolo
//         Object[] deleteVeicoloMotoParams = { nuovoVeicoloMoto };
//         int deletedVeicoloMoto = daoV.delete("delete_veicolo", deleteVeicoloMotoParams);
//         System.out.println("\nVeicolo (moto) eliminato! Righe eliminate: " + deletedVeicoloMoto);
//
//         // Eliminazione moto effettiva
//         Object[] deleteMotoParams = { nuovoIdMoto };
//         int deletedMoto = daoMo.delete("delete_moto", deleteMotoParams);
//         System.out.println("Moto eliminata! Righe eliminate: " + deletedMoto);

            for (String riga : params) {
                if (riga.startsWith("add:")) {
                    gestisciAddGenerico(riga);
                } else if (riga.startsWith("update:")) {
                    gestisciUpdateGenerico(riga);
                } else if (riga.startsWith("delete:")) {
                    gestisciDeleteGenerico(riga);
                } else {
                    System.out.println("Operazione non gestita: " + riga);
                }
            }
            
        } catch (Exception e) {
            System.out.println("Error found: " + e.getMessage());
            rc = false;
        }
        
        try {
            SQLConfiguration.getInstance().closeConnection();
        } catch (AcademyException e) {
            System.out.println("Error in close connection: " + e.getMessage());
        }

        System.out.println("\nConnessione chiusa!\n");
        return rc;
    }
    
    private void gestisciAddGenerico(String riga) throws Exception {
    	
        String[] parti = riga.split(":");
        if (parti.length < 2) return;

        String[] valori = parti[1].split(",");
        String tipo = valori[0].toLowerCase();

        switch (tipo) {
            case "macchina" -> insertMacchina(valori);
            case "moto"     -> insertMoto(valori);
            case "bici"     -> insertBici(valori);
            default         -> System.out.println("Tipo non gestito: " + tipo);
        }
    }
    
    private void gestisciUpdateGenerico(String riga) throws Exception {
        String[] parti = riga.split(":");
        if (parti.length < 2) return;

        String[] valori = parti[1].split(",", 3); // tipo, id, campi
        if (valori.length < 3) {
            System.out.println("Update malformato: " + riga);
            return;
        }

        String tipo = valori[0].toLowerCase();
        int id = Integer.parseInt(valori[1]);
        String[] campi = valori[2].split(",");

        switch (tipo) {
            case "macchina" -> updateMacchina(id, campi);
            case "moto"     -> updateMoto(id, campi);
            case "bici"     -> updateBici(id, campi);
            default         -> System.out.println("Tipo non gestito nell'update: " + tipo);
        }
    }
    
    private void gestisciDeleteGenerico(String riga) throws Exception {
        String[] parti = riga.split(":");
        if (parti.length < 2) return;

        String[] valori = parti[1].split(",");
        if (valori.length < 2) {
            System.out.println("Formato delete non valido. Serve tipo,idTipo");
            return;
        }

        String tipo = valori[0].trim().toLowerCase();
        int idTipo = Integer.parseInt(valori[1].trim()); // ← fix qui

        int idVeicolo = switch (tipo) {
            case "macchina" -> Utils.getIdVeicoloByTipo("id_macchina", idTipo);
            case "moto"     -> Utils.getIdVeicoloByTipo("id_moto", idTipo);
            case "bici"     -> Utils.getIdVeicoloByTipo("id_bici", idTipo);
            default         -> throw new Exception("Tipo non gestito: " + tipo);
        };

        int deletedVeicolo = daoV.delete("delete_veicolo", new Object[]{idVeicolo});
        System.out.println("Veicolo eliminato! Righe eliminate: " + deletedVeicolo);

        int deleted = switch (tipo) {
            case "macchina" -> daoM.delete("delete_macchina", new Object[]{idTipo});
            case "moto"     -> daoMo.delete("delete_moto", new Object[]{idTipo});
            case "bici"     -> daoB.delete("delete_bici", new Object[]{idTipo});
            default         -> 0;
        };

        System.out.println("Delete " + tipo + " - righe eliminate: " + deleted);
    }

    private void insertMacchina(String[] c) throws Exception {
        int idNumeroRuote = Utils.getIdFromValue("numeroruote", "numeroruote", c[1]);
        int idAlim        = Utils.getIdFromValue("alimentazione", "alimentazione", c[2]);
        int idCat         = Utils.getIdFromValue("categoria", "categoria", c[3]);
        int idColore      = Utils.getIdFromValue("colore", "colore", c[4]);
        int idMarca       = Utils.getIdFromValue("marca", "marca", c[5]);
        int anno          = Integer.parseInt(c[6]);
        int idModello     = Utils.getIdFromValue("modello", "modello", c[7]);
        int porte         = Integer.parseInt(c[8]);
        String targa      = c[9];
        int cc            = Integer.parseInt(c[10]);

        int idMacchina = daoM.insert("insert_macchina", new Object[]{porte, targa, cc});
        Object[] veicoloParams = {anno, idNumeroRuote, idAlim, idCat, idColore, idMarca, idModello, idMacchina, null, null};
        daoV.insert("insert_veicolo", veicoloParams);
    }

    private void insertMoto(String[] c) throws Exception {
        int idNumeroRuote = Utils.getIdFromValue("numeroruote", "numeroruote", c[1]);
        int idAlim        = Utils.getIdFromValue("alimentazione", "alimentazione", c[2]);
        int idCat         = Utils.getIdFromValue("categoria", "categoria", c[3]);
        int idColore      = Utils.getIdFromValue("colore", "colore", c[4]);
        int idMarca       = Utils.getIdFromValue("marca", "marca", c[5]);
        int anno          = Integer.parseInt(c[6]);
        int idModello     = Utils.getIdFromValue("modello", "modello", c[7]);
        String targa      = c[8];
        int cc            = Integer.parseInt(c[9]);

        int idMoto = daoMo.insert("insert_moto", new Object[]{targa, cc});
        Object[] veicoloParams = {anno, idNumeroRuote, idAlim, idCat, idColore, idMarca, idModello, null, idMoto, null};
        daoV.insert("insert_veicolo", veicoloParams);
    }

    private void insertBici(String[] c) throws Exception {
        int idNumeroRuote = Utils.getIdFromValue("numeroruote", "numeroruote", c[1]);
        int idAlim        = Utils.getIdFromValue("alimentazione", "alimentazione", c[2]);
        int idCat         = Utils.getIdFromValue("categoria", "categoria", c[3]);
        int idColore      = Utils.getIdFromValue("colore", "colore", c[4]);
        int idMarca       = Utils.getIdFromValue("marca", "marca", c[5]);
        int anno          = Integer.parseInt(c[6]);
        int idModello     = Utils.getIdFromValue("modello", "modello", c[7]);
        int marce         = Integer.parseInt(c[8]);
        int idSosp        = Utils.getIdFromValue("sospensione", "sospensione", c[9]);
        boolean pieghevole = Boolean.parseBoolean(c[10]);

        int idBici = daoB.insert("insert_bici", new Object[]{marce, idSosp, pieghevole});
        Object[] veicoloParams = {anno, idNumeroRuote, idAlim, idCat, idColore, idMarca, idModello, null, null, idBici};
        daoV.insert("insert_veicolo", veicoloParams);
    }
    
    private void updateMacchina(int id, String[] campi) throws Exception {
    	
        String targa = null;
        Integer porte = null;
        Integer cc = null;

        for (String campo : campi) {
            String[] coppia = campo.split("=");
            switch (coppia[0]) {
                case "targa" -> targa = coppia[1];
                case "porte" -> porte = Integer.parseInt(coppia[1]);
                case "cc"    -> cc = Integer.parseInt(coppia[1]);
            }
        }

        Object[] params = {
            porte != null ? porte : 0,
            targa != null ? targa : "",
            cc != null ? cc : 0,
            id
        };
        int updated = daoM.update("update_macchina", params);
        System.out.println("Update macchina - righe modificate: " + updated);
    }

    private void updateMoto(int id, String[] campi) throws Exception {
    	
        String targa = null;
        Integer cc = null;

        for (String campo : campi) {
            String[] coppia = campo.split("=");
            switch (coppia[0]) {
                case "targa" -> targa = coppia[1];
                case "cc"    -> cc = Integer.parseInt(coppia[1]);
            }
        }

        Object[] params = {
            targa != null ? targa : "",
            cc != null ? cc : 0,
            id
        };
        int updated = daoMo.update("update_moto", params);
        System.out.println("Update moto - righe modificate: " + updated);
    }

    private void updateBici(int id, String[] campi) throws Exception {
    	
        Integer marce = null;
        Integer idSospensione = null;
        Boolean pieghevole = null;

        for (String campo : campi) {
            String[] coppia = campo.split("=");
            switch (coppia[0]) {
                case "marce"      -> marce = Integer.parseInt(coppia[1]);
                case "sospensione"-> idSospensione = Utils.getIdFromValue("sospensione", "tipoSospensione", coppia[1]);
                case "pieghevole" -> pieghevole = Boolean.parseBoolean(coppia[1]);
            }
        }

        Object[] params = {
            marce != null ? marce : 0,
            idSospensione != null ? idSospensione : 0,
            pieghevole != null ? pieghevole : false,
            id
        };
        
        int updated = daoB.update("update_bici", params);
        System.out.println("Update bici - righe modificate: " + updated);
    }

    
}
