package com.betacom.jpa.services.implementations;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.betacom.jpa.dto.CertificatoDTO;
import com.betacom.jpa.dto.SocioDTO;
import com.betacom.jpa.exception.AcademyException;
import com.betacom.jpa.models.Socio;
import com.betacom.jpa.repositories.ISocioRepository;
import com.betacom.jpa.requests.SocioReq;
import com.betacom.jpa.services.interfaces.ISocioServices;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
public class SocioImpl implements ISocioServices{

	@Autowired
	private ISocioRepository socioRepository;

	@Override
	public Integer insert(SocioReq req) throws AcademyException {
		
		log.debug("Insert: " + req);
		
		System.out.println("Insert: " + req.toString());
		
		Socio soc = new Socio();
		
		Optional<Socio> s = socioRepository.findByCodiceFiscale(req.getCodiceFiscale());
		
		if(s.isPresent()) throw new AcademyException("Socio gi√† esistente nel database");
		
		soc.setCodiceFiscale(req.getCodiceFiscale());
		soc.setCognome(req.getCognome());
		soc.setEmail(req.getEmail());
		soc.setNome(req.getNome());
		
		return socioRepository.save(soc).getId();
		
		
		
	}

	@Override
	public List<SocioDTO> listAll() {
	    List<Socio> ls = socioRepository.findAll();
	    return ls.stream()
	    	    .map(s -> SocioDTO.builder()
	    	        .id(s.getId())
	    	        .cognome(s.getCognome())
	    	        .nome(s.getNome())
	    	        .codiceFiscale(s.getCodiceFiscale())
	    	        .email(s.getEmail())
	    	        .certificato(
	    	            CertificatoDTO.builder()
	    	                .id(s.getCertificato().getId())
	    	                .tipo(s.getCertificato().getTipo())
	    	                .dataCertificato(s.getCertificato().getDataCertificato())
	    	                .build()
	    	        )
	    	        .build())
	    	    .collect(Collectors.toList());

	}
	
}
